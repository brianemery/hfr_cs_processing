function  dat = ReadCS(filename,vb)% dat = ReadCS(filename);%--------------------------------------------------------------------------------%%Input:%	filename				- Input Cross Spectra file name as an ASCII string%								e.g. 'CSA OSU2 97/05/20 1200'%%--------------------------------------------------------------------------------%%Output:%	rdCSErr					- Return error code%								= 0 => No error%								= 1 => Bad Version Number%								= 2 => Header field 3 not correct%								= 3 => Kind of data (field 4) not =1,2%								= 4 => Header field 5 not correct%								= 5 => Header field 7 not correct%								= 6 => Header field 19 not correct%								= 7 => File close error%	dateTimeSec04			- Date/Time of data in seconds since 1/1/1904%	kindOfData				- Kind of data %								=1 => Unaveraged cross spectra%								=2 => Averaged cross spectra%	siteStr					- Site designation (4 characters), e.g. 'PPin'%	averagingTimeMin		- Averaging time in minutes (default 60 min)%	freqMHz					- Frequency in MHz (default 12 MHz)%	SwRfreqHz				- Sweep repetition frequency in Hz (default 2 Hz)%	SwBWkHz					- Sweep bandwidth in kHz (default 50 kHz)%	sweepUpDown				- Sweep up(=True) or down(=False) (default False)%	nRangeCells				- Number of range cells %							     (default 32 for unaveraged, 31 for averaged)%	firstRangeCell			- First range cell (default 0)%	distToFirstRangeCell	- Distance to first range cell in km%%					The following are the cross spectra data%					They are matrices with size [nFFT,nRangeCells]%	antenna1Self			- Antenna#1 self spectra %	antenna2Self			- Antenna#2 self spectra %	antenna3Self			- Antenna#3 self spectra %	antenna12CrossSp		- Antenna#1*conj(Antenna#2)) cross spectra (complex)%	antenna13CrossSp		- Antenna#1*conj(Antenna#3)) cross spectra (complex)%	antenna23CrossSp		- Antenna#2*conj(Antenna#3)) cross spectra (complex)%	spectraQualNum			- Spectral quality numbers (0.0 to 1.0) these are used %							  only with the averaged cross spectra. They represent%							  the fraction of unaveraged spectral values removed at%							  bin over the (hour) averaging period due to ship or%							  interference rejection procedures.%							- If this number drops below 0.5 (50%), a minus sign%							  is placed in front of 'antenna3Self' as a flag to%							  suggest this bin not be used for subsequent processing%							  because the data is too stale.  The minus can be ignored.%% Modified from COS's ReadCS.m by Brian Emery. Copyright probably still% applies .... % Original by   Jimmy Isaacson%  jimmy@codaros.comif nargin < 2, vb = 0; end%--------------------------------------------------------------------------------%				Read in header data%curVersNo=4;curNbytesA=hex2dec('3E');curNbytesB=hex2dec('38');curNbytesC=hex2dec('30');curNbytesD=hex2dec('00');rdCSErr=0;%				Open file for read onlyfid=fopen(filename,'r','b'); %				Read in specific header dataversNo=fread(fid,1,'int16');if versNo ~= curVersNo  rdCSErr=1;  disp('error at line 76: need ReadCSA2.m?'),keyboard,returnenddTHex=fread(fid,4,'uchar');dateTimeSec04=dTHex(4)+dTHex(3)*256+dTHex(2)*(256^2)+dTHex(1)*(256^3); NbytesA=fread(fid,1,'int32');if NbytesA ~= curNbytesA  rdCSErr=2;  disp('return at line 83'),returnendkindOfData=fread(fid,1,'int16');if kindOfData > 2  rdCSErr=3;  disp('return at line 88'),returnendNbytesB=fread(fid,1,'int32');if NbytesB ~= curNbytesB  rdCSErr=4;  disp('return at line 93'),returnendsiteStr=setstr(fread(fid,4,'uchar'))';NbytesC=fread(fid,1,'int32');if NbytesC ~= curNbytesC  rdCSErr=5;  disp('return at line 99'),returnendaveragingTimeMin=fread(fid,1,'int32');deleteRawSpectra=fread(fid,1,'int32');overrideRemHeader=fread(fid,1,'int32');freqMHz=fread(fid,1,'float32');SwRfreqHz=fread(fid,1,'float32');SwBWkHz=fread(fid,1,'float32');sweepUp=fread(fid,1,'int32'); % BE modified from sweepUpDown (true if up)fftLength=fread(fid,1,'int32');nRangeCells=fread(fid,1,'int32');firstRangeCell=fread(fid,1,'int32');distToFirstRangeCell=fread(fid,1,'float32');NbytesD=fread(fid,1,'int32');if NbytesD ~= curNbytesD  rdCSErr=6;  returnend%%--------------------------------------------------------------------------------%%				Read in cross spectra data%%				Setup and zero out matricesantenna1Self=zeros(fftLength,nRangeCells);antenna2Self=zeros(fftLength,nRangeCells);antenna3Self=zeros(fftLength,nRangeCells);antenna12CrossSp=zeros(fftLength,nRangeCells);antenna13CrossSp=zeros(fftLength,nRangeCells);antenna23CrossSp=zeros(fftLength,nRangeCells);spectraQualNum=zeros(fftLength,nRangeCells);%				Begin loopfor iRangeLoop=1:nRangeCells%				Read in self spectra data  antenna1Self(:,iRangeLoop)=fread(fid,fftLength,'float32');  antenna2Self(:,iRangeLoop)=fread(fid,fftLength,'float32');  antenna3Self(:,iRangeLoop)=fread(fid,fftLength,'float32');%				Read in cross spectra data; real and imaginary seperately  antenna12CSp=fread(fid,[2,fftLength],'float32')';  antenna13CSp=fread(fid,[2,fftLength],'float32')';  antenna23CSp=fread(fid,[2,fftLength],'float32')';%				Combine real and imaginary cross spectra data  antenna12CrossSp(:,iRangeLoop)=antenna12CSp(:,1)+i*antenna12CSp(:,2);  antenna13CrossSp(:,iRangeLoop)=antenna13CSp(:,1)+i*antenna13CSp(:,2);  antenna23CrossSp(:,iRangeLoop)=antenna23CSp(:,1)+i*antenna23CSp(:,2); %				If averaged data, read in spectral quality numbers  if kindOfData == 2    spectraQualNum(:,iRangeLoop)=fread(fid,fftLength,'float32');  endend%				Close filestatus=fclose(fid);if status ~= 0  rdCSErr=7;end% BE: put data in structuresdat = cs_struct(1);dat.Header.dateTimeSec04=dateTimeSec04;dat.Header.kindOfData=kindOfData;dat.Header.siteStr=siteStr;dat.Header.averagingTimeMin=averagingTimeMin;dat.Header.freqMHz=freqMHz;dat.Header.SwRfreqHz=SwRfreqHz;dat.Header.SwBWkHz=SwBWkHz;dat.Header.sweepUp = sweepUp;dat.Header.fftLength = fftLength;dat.Header.nRangeCells=nRangeCells;dat.Header.firstRangeCell=firstRangeCell;dat.Header.distToFirstRangeCell=distToFirstRangeCell;dat.Header.dTHex=dTHex;dat.Header.deleteRawSpectra=deleteRawSpectra;dat.Header.overrideRemHeader=overrideRemHeader;% data ...dat.antenna1Self=antenna1Self;dat.antenna2Self=antenna2Self;dat.antenna3Self=antenna3Self;dat.antenna12CrossSp=antenna12CrossSp;dat.antenna13CrossSp=antenna13CrossSp;dat.antenna23CrossSp=antenna23CrossSp;dat.spectraQualNum=spectraQualNum;if vb, disp(['loaded ' filename]), enddat.rdCSErr = rdCSErr;dat.FileName = filename;end